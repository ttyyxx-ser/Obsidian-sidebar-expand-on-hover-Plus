/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    leftSidebarWidth: 252,
    rightSidebarWidth: 252,
    leftPin: false,
    rightPin: false,
    leftSideEnabled: true,
    rightSideEnabled: true,
    hideDelay: 1000,
    hotzoneWidth: 10,
    tabBarEnabled: true,
    leftTabBarPin: false,
    rightTabBarPin: false,
    titleBarEnabled: true,
    titleBarPin: false,
    titleBarHotzoneHeight: 5
};

class SidebarExpandOnHoverPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        
        this.isMouseInLeftSidebar = false;
        this.isMouseInRightSidebar = false;
        this.isMouseInTitleBar = false;
        this.isMouseInLeftTabHeader = false;
        this.isMouseInTopHotzone = false;
        
        this.leftSidebarHideTimeout = null;
        this.rightSidebarHideTimeout = null;
        this.leftTabBarHideTimeout = null;
        this.rightTabBarHideTimeout = null;
        this.titleBarHideTimeout = null;

        this.rightClickTimerLeft = null;
        this.rightClickTimerRight = null;
        this.rightClickTimerLeftTabBar = null;
        this.rightClickTimerRightTabBar = null;
        this.rightClickTimerTitleBar = null;

        this.domElements = {
            leftRibbon: null,
            rightRibbon: null,
            leftSidebar: null,
            rightSidebar: null,
            titleBar: null,
            titleBarInner: null,
            workspaceTabs: null,
            leftTabHeaderContainer: null,
            leftTabIcons: null,
            workspaceContainer: null,
            leftTabBar: null,
            rightTabBar: null
        };

        this.initialize = () => {
            this.domElements.leftRibbon = this.app.workspace.leftRibbon.containerEl;
            this.domElements.rightRibbon = this.app.workspace.rightRibbon.containerEl;
            this.domElements.leftSidebar = this.app.workspace.leftSplit.containerEl;
            this.domElements.rightSidebar = this.app.workspace.rightSplit.containerEl;
            this.domElements.titleBar = document.querySelector('.titlebar');
            this.domElements.titleBarInner = document.querySelector('.titlebar-inner');
            this.domElements.workspaceTabs = document.querySelector('.workspace-tabs');
            this.domElements.workspaceContainer = this.app.workspace.containerEl;
            
            this.domElements.leftTabHeaderContainer = this.domElements.leftSidebar?.querySelector('.workspace-tab-header-container-inner');
            this.domElements.leftTabIcons = this.domElements.leftSidebar?.querySelectorAll('.workspace-tab-header');
            this.domElements.leftTabBar = document.querySelector('.workspace-tab-header-container');
            this.domElements.rightTabBar = document.querySelectorAll('.workspace-tab-header-container')[1];
            
            this.injectStyles();
        };

        this.injectStyles = () => {
            const style = document.createElement('style');
            style.id = 'auto-hide-styles';
            style.textContent = `
                .auto-hide-tab-bar {
                    opacity: 0;
                    transition: opacity 0.3s ease;
                }
                .auto-hide-tab-bar:hover,
                .auto-hide-tab-bar.pinned {
                    opacity: 1;
                }
                .workspace-tab-header-container:hover .auto-hide-tab-bar,
                .workspace-tab-header-container.pinned .auto-hide-tab-bar {
                    opacity: 1;
                }
                
                .titlebar.auto-hide-titlebar,
                .titlebar-inner.auto-hide-titlebar,
                .workspace-tabs.auto-hide-titlebar {
                    opacity: 0;
                    transition: opacity 0.3s ease;
                }
                .titlebar:hover .auto-hide-titlebar,
                .titlebar.pinned .auto-hide-titlebar,
                .titlebar-inner:hover .auto-hide-titlebar,
                .titlebar-inner.pinned .auto-hide-titlebar,
                .workspace-tabs:hover .auto-hide-titlebar,
                .workspace-tabs.pinned .auto-hide-titlebar,
                .titlebar:hover,
                .titlebar.pinned,
                .titlebar-inner:hover,
                .titlebar-inner.pinned,
                .workspace-tabs:hover,
                .workspace-tabs.pinned {
                    opacity: 1;
                }
            `;
            document.head.appendChild(style);
        };

        this.setEvents = () => {
            const { leftRibbon, rightRibbon, leftSidebar, rightSidebar, titleBar, titleBarInner, workspaceTabs, leftTabHeaderContainer, leftTabIcons, workspaceContainer, leftTabBar, rightTabBar } = this.domElements;

            if (workspaceContainer) {
                this.registerDomEvent(workspaceContainer, 'mousemove', (evt) => {
                    if (this.settings.leftSideEnabled && !this.settings.leftPin) {
                        const mouseX = evt.clientX;
                        
                        // 修复问题1：检查左侧热区，无论窗口是否最大化
                        if (mouseX <= this.settings.hotzoneWidth) {
                            this.clearLeftSidebarHideTimeout();
                            this.expandSidebar(leftSidebar);
                        }
                    }
                    
                    if (this.settings.rightSideEnabled && !this.settings.rightPin) {
                        const windowWidth = window.innerWidth;
                        const mouseX = evt.clientX;
                        
                        if (windowWidth - mouseX <= this.settings.hotzoneWidth) {
                            this.clearRightSidebarHideTimeout();
                            this.expandSidebar(rightSidebar);
                        }
                    }
                    
                    const mouseY = evt.clientY;
                    if (mouseY <= this.settings.titleBarHotzoneHeight) {
                        this.isMouseInTopHotzone = true;
                        this.clearTitleBarHideTimeout();
                        this.showTitleBar();
                    } else {
                        this.isMouseInTopHotzone = false;
                        if (!this.isMouseInTitleBar && !this.isSidebarExpanded()) {
                            this.scheduleTitleBarHide();
                        }
                    }
                });
            }

            if (titleBar) {
                this.registerDomEvent(titleBar, 'mouseenter', () => {
                    this.isMouseInTitleBar = true;
                    this.clearLeftSidebarHideTimeout();
                    this.clearTitleBarHideTimeout();
                    this.showTitleBar();
                });

                this.registerDomEvent(titleBar, 'mouseleave', (evt) => {
                    this.isMouseInTitleBar = false;
                    this.scheduleLeftSidebarHide();
                    if (!this.isMouseInTopHotzone && !this.isSidebarExpanded()) {
                        this.scheduleTitleBarHide();
                    }
                });

                this.registerDomEvent(titleBar, 'contextmenu', (evt) => {
                    if (this.settings.titleBarEnabled) {
                        this.handleRightClick('titleBar', evt);
                    }
                });
            }

            if (workspaceTabs) {
                this.registerDomEvent(workspaceTabs, 'mouseenter', () => {
                    this.isMouseInTitleBar = true;
                    this.clearTitleBarHideTimeout();
                    this.showTitleBar();
                });

                this.registerDomEvent(workspaceTabs, 'mouseleave', (evt) => {
                    this.isMouseInTitleBar = false;
                    if (!this.isMouseInTopHotzone && !this.isSidebarExpanded()) {
                        this.scheduleTitleBarHide();
                    }
                });

                this.registerDomEvent(workspaceTabs, 'contextmenu', (evt) => {
                    if (this.settings.titleBarEnabled) {
                        this.handleRightClick('titleBar', evt);
                    }
                });
            }

            if (leftTabHeaderContainer) {
                this.registerDomEvent(leftTabHeaderContainer, 'mouseenter', () => {
                    this.isMouseInLeftTabHeader = true;
                    this.clearLeftSidebarHideTimeout();
                    
                    if (!this.settings.leftPin) {
                        this.expandSidebar(leftSidebar);
                    }
                });

                this.registerDomEvent(leftTabHeaderContainer, 'mouseleave', (evt) => {
                    this.isMouseInLeftTabHeader = false;
                    
                    if (evt.relatedTarget) {
                        if (leftSidebar.contains(evt.relatedTarget)) {
                            return;
                        }
                        if (leftRibbon.contains(evt.relatedTarget)) {
                            return;
                        }
                        if (this.isMouseOverTabIcon(evt.relatedTarget)) {
                            return;
                        }
                    }
                    
                    this.scheduleLeftSidebarHide();
                });

                // 修复问题2：左侧边栏选项卡右键双击只控制标签栏
                this.registerDomEvent(leftTabHeaderContainer, 'contextmenu', (evt) => {
                    if (this.settings.tabBarEnabled) {
                        evt.stopPropagation(); // 阻止事件冒泡到侧边栏
                        this.handleRightClick('leftTabBar', evt);
                    }
                });
            }

            if (leftSidebar) {
                this.registerDomEvent(leftSidebar, 'contextmenu', (evt) => {
                    if (this.settings.leftSideEnabled) {
                        // 修复问题3：左侧边栏右键双击只控制侧边栏
                        this.handleRightClick('leftSidebar', evt);
                    }
                });
            }

            if (rightSidebar) {
                this.registerDomEvent(rightSidebar, 'contextmenu', (evt) => {
                    if (this.settings.rightSideEnabled) {
                        this.handleRightClick('rightSidebar', evt);
                    }
                });
            }

            if (leftTabBar && this.settings.tabBarEnabled) {
                this.registerDomEvent(leftTabBar, 'mouseenter', () => {
                    this.clearLeftTabBarHideTimeout();
                    this.showTabBar('left');
                });

                this.registerDomEvent(leftTabBar, 'mouseleave', (evt) => {
                    this.scheduleLeftTabBarHide();
                });

                this.registerDomEvent(leftTabBar, 'contextmenu', (evt) => {
                    if (this.settings.tabBarEnabled) {
                        this.handleRightClick('leftTabBar', evt);
                    }
                });
            }

            if (rightTabBar && this.settings.tabBarEnabled) {
                this.registerDomEvent(rightTabBar, 'mouseenter', () => {
                    this.clearRightTabBarHideTimeout();
                    this.showTabBar('right');
                });

                this.registerDomEvent(rightTabBar, 'mouseleave', (evt) => {
                    this.scheduleRightTabBarHide();
                });

                this.registerDomEvent(rightTabBar, 'contextmenu', (evt) => {
                    if (this.settings.tabBarEnabled) {
                        this.handleRightClick('rightTabBar', evt);
                    }
                });
            }

            if (leftTabIcons && leftTabIcons.length > 0) {
                leftTabIcons.forEach((tabIcon) => {
                    this.registerDomEvent(tabIcon, 'mouseenter', () => {
                        this.clearLeftSidebarHideTimeout();
                    });

                    this.registerDomEvent(tabIcon, 'mouseleave', (evt) => {
                        if (evt.relatedTarget && this.isMouseOverTabIcon(evt.relatedTarget)) {
                            return;
                        }
                        this.scheduleLeftSidebarHide();
                    });
                });
            }

            this.registerDomEvent(document, 'mouseleave', () => {
                this.scheduleSidebarsHide();
                this.scheduleTabBarsHide();
                if (!this.isSidebarExpanded()) {
                    this.scheduleTitleBarHide();
                }
            });

            this.registerDomEvent(this.app.workspace.rootSplit.containerEl, 'mouseenter', () => {
                this.scheduleSidebarsHide();
                this.scheduleTabBarsHide();
                if (!this.isSidebarExpanded()) {
                    this.scheduleTitleBarHide();
                }
            });

            this.registerDomEvent(leftRibbon, 'mouseenter', () => {
                this.clearLeftSidebarHideTimeout();
                if (!this.settings.leftPin) {
                    this.expandSidebar(leftSidebar);
                }
            });

            this.registerDomEvent(leftRibbon, 'mouseleave', (evt) => {
                if (evt.relatedTarget && 
                    (leftSidebar.contains(evt.relatedTarget) || 
                     (leftTabHeaderContainer && leftTabHeaderContainer.contains(evt.relatedTarget)) ||
                     (titleBar && titleBar.contains(evt.relatedTarget)) ||
                     (workspaceTabs && workspaceTabs.contains(evt.relatedTarget)) ||
                     (this.isMouseOverTabIcon(evt.relatedTarget)))) {
                    return;
                }
                
                this.scheduleLeftSidebarHide();
            });

            this.registerDomEvent(rightRibbon, 'mouseenter', () => {
                this.clearRightSidebarHideTimeout();
                if (!this.settings.rightPin) {
                    this.expandSidebar(rightSidebar);
                }
            });

            this.registerDomEvent(rightRibbon, 'mouseleave', (evt) => {
                if (evt.relatedTarget && 
                    (rightSidebar.contains(evt.relatedTarget) ||
                     (titleBar && titleBar.contains(evt.relatedTarget)) ||
                     (workspaceTabs && workspaceTabs.contains(evt.relatedTarget)))) {
                    return;
                }
                this.scheduleRightSidebarHide();
            });

            this.registerDomEvent(leftSidebar, 'mouseenter', () => {
                this.isMouseInLeftSidebar = true;
                this.clearLeftSidebarHideTimeout();
                if (!this.settings.leftPin) {
                    this.expandSidebar(leftSidebar);
                }
            });

            this.registerDomEvent(leftSidebar, 'mouseleave', (evt) => {
                this.isMouseInLeftSidebar = false;
                
                if (evt.relatedTarget && 
                    (leftRibbon.contains(evt.relatedTarget) ||
                     (leftTabHeaderContainer && leftTabHeaderContainer.contains(evt.relatedTarget)) ||
                     (titleBar && titleBar.contains(evt.relatedTarget)) ||
                     (workspaceTabs && workspaceTabs.contains(evt.relatedTarget)) ||
                     (this.isMouseOverTabIcon(evt.relatedTarget)))) {
                    return;
                }
                
                this.scheduleLeftSidebarHide();
            });

            this.registerDomEvent(rightSidebar, 'mouseenter', () => {
                this.isMouseInRightSidebar = true;
                this.clearRightSidebarHideTimeout();
                if (!this.settings.rightPin) {
                    this.expandSidebar(rightSidebar);
                }
            });

            this.registerDomEvent(rightSidebar, 'mouseleave', (evt) => {
                this.isMouseInRightSidebar = false;
                if (evt.relatedTarget && 
                    (rightRibbon.contains(evt.relatedTarget) ||
                     (titleBar && titleBar.contains(evt.relatedTarget)) ||
                     (workspaceTabs && workspaceTabs.contains(evt.relatedTarget)))) {
                    return;
                }
                this.scheduleRightSidebarHide();
            });

            this.registerDomEvent(this.app.workspace.leftSplit.resizeHandleEl, 'mouseenter', () => {
                this.clearLeftSidebarHideTimeout();
                if (!this.settings.leftPin) {
                    this.expandSidebar(leftSidebar);
                }
                this.settings.leftSidebarWidth = Number(this.app.workspace.leftSplit.size);
                this.saveSettings();
            });

            this.registerDomEvent(this.app.workspace.rightSplit.resizeHandleEl, 'mouseenter', () => {
                this.clearRightSidebarHideTimeout();
                if (!this.settings.rightPin) {
                    this.expandSidebar(rightSidebar);
                }
                this.settings.rightSidebarWidth = Number(this.app.workspace.rightSplit.size);
                this.saveSettings();
            });

            this.registerDomEvent(leftRibbon, 'dblclick', () => {
                if (this.settings.leftSideEnabled) {
                    this.toggleSidebarLock('left');
                }
            });

            this.registerDomEvent(rightRibbon, 'dblclick', () => {
                if (this.settings.rightSideEnabled) {
                    this.toggleSidebarLock('right');
                }
            });
        };

        this.isSidebarExpanded = () => {
            return this.isMouseInLeftSidebar || this.isMouseInRightSidebar || 
                   this.settings.leftPin || this.settings.rightPin;
        };

        this.showTitleBar = () => {
            const { titleBar, titleBarInner, workspaceTabs } = this.domElements;
            
            if (this.settings.titleBarEnabled) {
                if (titleBar) {
                    titleBar.classList.remove('auto-hide-titlebar');
                    if (this.settings.titleBarPin) {
                        titleBar.classList.add('pinned');
                    }
                }
                if (titleBarInner) {
                    titleBarInner.classList.remove('auto-hide-titlebar');
                    if (this.settings.titleBarPin) {
                        titleBarInner.classList.add('pinned');
                    }
                }
                if (workspaceTabs) {
                    workspaceTabs.classList.remove('auto-hide-titlebar');
                    if (this.settings.titleBarPin) {
                        workspaceTabs.classList.add('pinned');
                    }
                }
            }
        };

        this.hideTitleBar = () => {
            const { titleBar, titleBarInner, workspaceTabs } = this.domElements;
            
            if (this.settings.titleBarEnabled && !this.settings.titleBarPin) {
                if (titleBar) {
                    titleBar.classList.add('auto-hide-titlebar');
                    titleBar.classList.remove('pinned');
                }
                if (titleBarInner) {
                    titleBarInner.classList.add('auto-hide-titlebar');
                    titleBarInner.classList.remove('pinned');
                }
                if (workspaceTabs) {
                    workspaceTabs.classList.add('auto-hide-titlebar');
                    workspaceTabs.classList.remove('pinned');
                }
            }
        };

        this.toggleTitleBarLock = () => {
            this.settings.titleBarPin = !this.settings.titleBarPin;
            if (this.settings.titleBarPin) {
                this.showTitleBar();
                new obsidian.Notice('标题栏已锁定');
            } else {
                this.hideTitleBar();
                new obsidian.Notice('标题栏已解锁');
            }
            this.saveSettings();
        };

        this.clearTitleBarHideTimeout = () => {
            if (this.titleBarHideTimeout) {
                clearTimeout(this.titleBarHideTimeout);
                this.titleBarHideTimeout = null;
            }
        };

        this.scheduleTitleBarHide = () => {
            if (!this.settings.titleBarEnabled || this.settings.titleBarPin || this.isSidebarExpanded()) return;
            
            this.clearTitleBarHideTimeout();
            
            this.titleBarHideTimeout = setTimeout(() => {
                this.hideTitleBar();
                this.titleBarHideTimeout = null;
            }, this.settings.hideDelay);
        };

        this.showTabBar = (side) => {
            const { leftTabBar, rightTabBar } = this.domElements;
            
            if (side === 'left' && leftTabBar) {
                leftTabBar.classList.remove('auto-hide-tab-bar');
                if (this.settings.leftTabBarPin) {
                    leftTabBar.classList.add('pinned');
                }
            } else if (side === 'right' && rightTabBar) {
                rightTabBar.classList.remove('auto-hide-tab-bar');
                if (this.settings.rightTabBarPin) {
                    rightTabBar.classList.add('pinned');
                }
            }
        };

        this.hideTabBar = (side) => {
            const { leftTabBar, rightTabBar } = this.domElements;
            
            if (side === 'left' && leftTabBar && !this.settings.leftTabBarPin) {
                leftTabBar.classList.add('auto-hide-tab-bar');
                leftTabBar.classList.remove('pinned');
            } else if (side === 'right' && rightTabBar && !this.settings.rightTabBarPin) {
                rightTabBar.classList.add('auto-hide-tab-bar');
                rightTabBar.classList.remove('pinned');
            }
        };

        this.toggleTabBarLock = (side) => {
            if (side === 'left') {
                this.settings.leftTabBarPin = !this.settings.leftTabBarPin;
                if (this.settings.leftTabBarPin) {
                    this.showTabBar('left');
                    new obsidian.Notice('左侧标签栏已锁定');
                } else {
                    this.hideTabBar('left');
                    new obsidian.Notice('左侧标签栏已解锁');
                }
            } else if (side === 'right') {
                this.settings.rightTabBarPin = !this.settings.rightTabBarPin;
                if (this.settings.rightTabBarPin) {
                    this.showTabBar('right');
                    new obsidian.Notice('右侧标签栏已锁定');
                } else {
                    this.hideTabBar('right');
                    new obsidian.Notice('右侧标签栏已解锁');
                }
            }
            this.saveSettings();
        };

        this.clearLeftTabBarHideTimeout = () => {
            if (this.leftTabBarHideTimeout) {
                clearTimeout(this.leftTabBarHideTimeout);
                this.leftTabBarHideTimeout = null;
            }
        };

        this.clearRightTabBarHideTimeout = () => {
            if (this.rightTabBarHideTimeout) {
                clearTimeout(this.rightTabBarHideTimeout);
                this.rightTabBarHideTimeout = null;
            }
        };

        this.scheduleLeftTabBarHide = () => {
            if (!this.settings.tabBarEnabled || this.settings.leftTabBarPin) return;
            
            this.clearLeftTabBarHideTimeout();
            
            this.leftTabBarHideTimeout = setTimeout(() => {
                this.hideTabBar('left');
                this.leftTabBarHideTimeout = null;
            }, this.settings.hideDelay);
        };

        this.scheduleRightTabBarHide = () => {
            if (!this.settings.tabBarEnabled || this.settings.rightTabBarPin) return;
            
            this.clearRightTabBarHideTimeout();
            
            this.rightTabBarHideTimeout = setTimeout(() => {
                this.hideTabBar('right');
                this.rightTabBarHideTimeout = null;
            }, this.settings.hideDelay);
        };

        this.scheduleTabBarsHide = () => {
            this.scheduleLeftTabBarHide();
            this.scheduleRightTabBarHide();
        };

        this.handleRightClick = (side, evt) => {
            evt.preventDefault();
            
            const currentTime = new Date().getTime();
            
            if (side === 'leftSidebar') {
                // 左侧边栏右键双击：只控制侧边栏
                if (this.rightClickTimerLeft && (currentTime - this.rightClickTimerLeft < 500)) {
                    this.toggleSidebarLock('left');
                    this.rightClickTimerLeft = null;
                } else {
                    this.rightClickTimerLeft = currentTime;
                    setTimeout(() => {
                        this.rightClickTimerLeft = null;
                    }, 500);
                }
            } else if (side === 'rightSidebar') {
                if (this.rightClickTimerRight && (currentTime - this.rightClickTimerRight < 500)) {
                    this.toggleSidebarLock('right');
                    this.rightClickTimerRight = null;
                } else {
                    this.rightClickTimerRight = currentTime;
                    setTimeout(() => {
                        this.rightClickTimerRight = null;
                    }, 500);
                }
            } else if (side === 'leftTabBar') {
                // 左侧标签栏右键双击：只控制标签栏
                if (this.rightClickTimerLeftTabBar && (currentTime - this.rightClickTimerLeftTabBar < 500)) {
                    this.toggleTabBarLock('left');
                    this.rightClickTimerLeftTabBar = null;
                } else {
                    this.rightClickTimerLeftTabBar = currentTime;
                    setTimeout(() => {
                        this.rightClickTimerLeftTabBar = null;
                    }, 500);
                }
            } else if (side === 'rightTabBar') {
                if (this.rightClickTimerRightTabBar && (currentTime - this.rightClickTimerRightTabBar < 500)) {
                    this.toggleTabBarLock('right');
                    this.rightClickTimerRightTabBar = null;
                } else {
                    this.rightClickTimerRightTabBar = currentTime;
                    setTimeout(() => {
                        this.rightClickTimerRightTabBar = null;
                    }, 500);
                }
            } else if (side === 'titleBar') {
                if (this.rightClickTimerTitleBar && (currentTime - this.rightClickTimerTitleBar < 500)) {
                    this.toggleTitleBarLock();
                    this.rightClickTimerTitleBar = null;
                } else {
                    this.rightClickTimerTitleBar = currentTime;
                    setTimeout(() => {
                        this.rightClickTimerTitleBar = null;
                    }, 500);
                }
            }
        };

        this.toggleSidebarLock = (side) => {
            if (side === 'left') {
                this.settings.leftPin = !this.settings.leftPin;
                if (this.settings.leftPin) {
                    this.expandSidebar(this.domElements.leftSidebar);
                    new obsidian.Notice('左侧边栏已锁定');
                } else {
                    new obsidian.Notice('左侧边栏已解锁');
                    if (!this.isMouseInLeftSidebar && !this.isMouseInLeftTabHeader) {
                        this.collapseSidebar(this.domElements.leftSidebar);
                    }
                }
            } else if (side === 'right') {
                this.settings.rightPin = !this.settings.rightPin;
                if (this.settings.rightPin) {
                    this.expandSidebar(this.domElements.rightSidebar);
                    new obsidian.Notice('右侧边栏已锁定');
                } else {
                    new obsidian.Notice('右侧边栏已解锁');
                    if (!this.isMouseInRightSidebar) {
                        this.collapseSidebar(this.domElements.rightSidebar);
                    }
                }
            }
            this.saveSettings();
        };

        this.isMouseOverTabIcon = (element) => {
            if (!element) return false;
            return element.closest('.workspace-tab-header') !== null;
        };

        this.clearLeftSidebarHideTimeout = () => {
            if (this.leftSidebarHideTimeout) {
                clearTimeout(this.leftSidebarHideTimeout);
                this.leftSidebarHideTimeout = null;
            }
        };

        this.clearRightSidebarHideTimeout = () => {
            if (this.rightSidebarHideTimeout) {
                clearTimeout(this.rightSidebarHideTimeout);
                this.rightSidebarHideTimeout = null;
            }
        };

        this.scheduleLeftSidebarHide = () => {
            if (this.settings.leftPin) return;
            
            this.clearLeftSidebarHideTimeout();
            
            this.leftSidebarHideTimeout = setTimeout(() => {
                if (!this.settings.leftPin && 
                    !this.isMouseInLeftSidebar && 
                    !this.isMouseInLeftTabHeader && 
                    !this.isMouseInTitleBar) {
                    this.collapseSidebar(this.domElements.leftSidebar);
                    if (!this.isSidebarExpanded()) {
                        this.scheduleTitleBarHide();
                    }
                }
                this.leftSidebarHideTimeout = null;
            }, this.settings.hideDelay);
        };

        this.scheduleRightSidebarHide = () => {
            if (this.settings.rightPin) return;
            
            this.clearRightSidebarHideTimeout();
            
            this.rightSidebarHideTimeout = setTimeout(() => {
                if (!this.settings.rightPin && 
                    !this.isMouseInRightSidebar && 
                    !this.isMouseInTitleBar) {
                    this.collapseSidebar(this.domElements.rightSidebar);
                    if (!this.isSidebarExpanded()) {
                        this.scheduleTitleBarHide();
                    }
                }
                this.rightSidebarHideTimeout = null;
            }, this.settings.hideDelay);
        };

        this.scheduleSidebarsHide = () => {
            this.scheduleLeftSidebarHide();
            this.scheduleRightSidebarHide();
        };

        this.expandSidebar = (sidebar) => {
            const { leftSidebar, rightSidebar } = this.domElements;
            
            if (sidebar === leftSidebar && this.settings.leftSideEnabled) {
                this.app.workspace.leftSplit.setSize(this.settings.leftSidebarWidth);
                this.app.workspace.leftSplit.expand();
                this.showTitleBar();
            }
            if (sidebar === rightSidebar && this.settings.rightSideEnabled) {
                this.app.workspace.rightSplit.setSize(this.settings.rightSidebarWidth);
                this.app.workspace.rightSplit.expand();
                this.showTitleBar();
            }
        };

        this.collapseSidebar = (sidebar) => {
            const { leftSidebar, rightSidebar } = this.domElements;
            
            if (sidebar === leftSidebar &&
                !this.settings.leftPin &&
                this.settings.leftSideEnabled) {
                this.app.workspace.leftSplit.collapse();
            }
            if (sidebar === rightSidebar &&
                !this.settings.rightPin &&
                this.settings.rightSideEnabled) {
                this.app.workspace.rightSplit.collapse();
            }
        };
    }

    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.app.workspace.onLayoutReady(() => {
                this.loadSettings().then(() => {
                    this.initialize();
                    this.setEvents();
                    this.addSettingTab(new SidebarExpandOnHoverSettingTab(this.app, this));
                    
                    setTimeout(() => {
                        if (this.settings.leftPin) {
                            this.expandSidebar(this.domElements.leftSidebar);
                        } else {
                            this.collapseSidebar(this.domElements.leftSidebar);
                        }
                        if (this.settings.rightPin) {
                            this.expandSidebar(this.domElements.rightSidebar);
                        } else {
                            this.collapseSidebar(this.domElements.rightSidebar);
                        }
                        
                        if (this.settings.tabBarEnabled) {
                            if (!this.settings.leftTabBarPin) {
                                this.hideTabBar('left');
                            }
                            if (!this.settings.rightTabBarPin) {
                                this.hideTabBar('right');
                            }
                        }
                        
                        if (this.settings.titleBarEnabled) {
                            if (!this.settings.titleBarPin && !this.isSidebarExpanded()) {
                                this.hideTitleBar();
                            }
                        }
                    }, 200);
                });
            });

            this.addCommand({
                id: 'Toggle-Left-Sidebar-Expand-On-Hover',
                name: '切换左侧边栏自动隐藏',
                callback: () => {
                    this.settings.leftSideEnabled = !this.settings.leftSideEnabled;
                    if (!this.settings.leftSideEnabled) {
                        this.settings.leftPin = false;
                    }
                    this.saveSettings();
                    new obsidian.Notice(`左侧边栏悬停展开 ${this.settings.leftSideEnabled ? '已启用' : '已禁用'}`);
                },
            });

            this.addCommand({
                id: 'Toggle-Right-Sidebar-Expand-On-Hover',
                name: '切换右侧边栏自动隐藏',
                callback: () => {
                    this.settings.rightSideEnabled = !this.settings.rightSideEnabled;
                    if (!this.settings.rightSideEnabled) {
                        this.settings.rightPin = false;
                    }
                    this.saveSettings();
                    new obsidian.Notice(`右侧边栏悬停展开 ${this.settings.rightSideEnabled ? '已启用' : '已禁用'}`);
                },
            });

            this.addCommand({
                id: 'toggle-left-sidebar-lock',
                name: '切换左侧边栏锁定状态',
                callback: () => {
                    this.toggleSidebarLock('left');
                },
            });

            this.addCommand({
                id: 'toggle-right-sidebar-lock',
                name: '切换右侧边栏锁定状态',
                callback: () => {
                    this.toggleSidebarLock('right');
                },
            });

            this.addCommand({
                id: 'toggle-left-tabbar-lock',
                name: '切换左侧标签栏锁定状态',
                callback: () => {
                    this.toggleTabBarLock('left');
                },
            });

            this.addCommand({
                id: 'toggle-right-tabbar-lock',
                name: '切换右侧标签栏锁定状态',
                callback: () => {
                    this.toggleTabBarLock('right');
                },
            });

            this.addCommand({
                id: 'toggle-tabbar-auto-hide',
                name: '切换标签栏自动隐藏',
                callback: () => {
                    this.settings.tabBarEnabled = !this.settings.tabBarEnabled;
                    if (this.settings.tabBarEnabled) {
                        if (!this.settings.leftTabBarPin) this.hideTabBar('left');
                        if (!this.settings.rightTabBarPin) this.hideTabBar('right');
                        new obsidian.Notice('标签栏自动隐藏已启用');
                    } else {
                        this.showTabBar('left');
                        this.showTabBar('right');
                        new obsidian.Notice('标签栏自动隐藏已禁用');
                    }
                    this.saveSettings();
                },
            });

            this.addCommand({
                id: 'toggle-titlebar-auto-hide',
                name: '切换标题栏自动隐藏',
                callback: () => {
                    this.settings.titleBarEnabled = !this.settings.titleBarEnabled;
                    if (this.settings.titleBarEnabled) {
                        if (!this.settings.titleBarPin && !this.isSidebarExpanded()) {
                            this.hideTitleBar();
                        }
                        new obsidian.Notice('标题栏自动隐藏已启用');
                    } else {
                        this.showTitleBar();
                        new obsidian.Notice('标题栏自动隐藏已禁用');
                    }
                    this.saveSettings();
                },
            });

            this.addCommand({
                id: 'toggle-titlebar-lock',
                name: '切换标题栏锁定状态',
                callback: () => {
                    this.toggleTitleBarLock();
                },
            });
        });
    }

    onunload() {
        this.clearLeftSidebarHideTimeout();
        this.clearRightSidebarHideTimeout();
        this.clearLeftTabBarHideTimeout();
        this.clearRightTabBarHideTimeout();
        this.clearTitleBarHideTimeout();
        
        const style = document.getElementById('auto-hide-styles');
        if (style) {
            style.remove();
        }
        
        this.showTabBar('left');
        this.showTabBar('right');
        this.showTitleBar();
        
        this.saveSettings();
    }

    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }

    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

class SidebarExpandOnHoverSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }

    display() {
        const { containerEl } = this;
        containerEl.empty();
        
        
        containerEl.createEl('h4', { text: '自动隐藏延时' });
        new obsidian.Setting(containerEl)
            .setName('隐藏延迟（毫秒）')
            .setDesc('鼠标离开后自动隐藏侧边栏的延迟时间（默认值：1000 毫秒）')
            .addText(t => {
                t.setValue(String(this.plugin.settings.hideDelay));
                t.setPlaceholder('1000').onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    const delay = Number(value);
                    this.plugin.settings.hideDelay = delay > 0 ? delay : 1000;
                    this.plugin.saveSettings();
                }));
            });

        new obsidian.Setting(containerEl)
            .setName('热区宽度（像素）')
            .setDesc('鼠标靠近窗口边缘多少像素时触发侧边栏展开（默认值：10 像素）')
            .addText(t => {
                t.setValue(String(this.plugin.settings.hotzoneWidth));
                t.setPlaceholder('10').onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    const width = Number(value);
                    this.plugin.settings.hotzoneWidth = width > 0 ? width : 10;
                    this.plugin.saveSettings();
                }));
            });

        new obsidian.Setting(containerEl)
            .setName('标题栏热区高度（像素）')
            .setDesc('鼠标靠近窗口顶部多少像素时触发标题栏展开（默认值：5 像素）')
            .addText(t => {
                t.setValue(String(this.plugin.settings.titleBarHotzoneHeight));
                t.setPlaceholder('5').onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    const height = Number(value);
                    this.plugin.settings.titleBarHotzoneHeight = height > 0 ? height : 5;
                    this.plugin.saveSettings();
                }));
            });
        
        containerEl.createEl('h4', { text: '启用个人侧边栏' });
        
        new obsidian.Setting(containerEl)
            .setName('左侧边栏')
            .setDesc('切换以启用/禁用鼠标悬停时左侧边栏的展开功能')
            .addToggle(t => {
                t.setValue(this.plugin.settings.leftSideEnabled);
                t.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.leftSideEnabled = v;
                    if (!v) {
                        this.plugin.settings.leftPin = false;
                    }
                    this.plugin.saveSettings();
                }));
            });
        
        new obsidian.Setting(containerEl)
            .setName('右侧边栏')
            .setDesc('切换以启用/禁用鼠标悬停时右侧边栏的展开功能')
            .addToggle(t => {
                t.setValue(this.plugin.settings.rightSideEnabled);
                t.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.rightSideEnabled = v;
                    if (!v) {
                        this.plugin.settings.rightPin = false;
                    }
                    this.plugin.saveSettings();
                }));
            });
        
        containerEl.createEl('h4', { text: '侧边栏扩展宽度' });
        
        new obsidian.Setting(containerEl)
            .setName('左侧边栏')
            .setDesc('将左侧边栏的宽度设置为像素px单位')
            .addText(t => {
                t.setValue(String(this.plugin.settings.leftSidebarWidth));
                t.setPlaceholder('252').onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.leftSidebarWidth = Number(value);
                    this.app.workspace.leftSplit.setSize(this.plugin.settings.leftSidebarWidth);
                    this.plugin.saveSettings();
                }));
            });
        
        new obsidian.Setting(containerEl)
            .setName('右侧边栏')
            .setDesc('将右侧边栏的宽度设置为像素px单位')
            .addText(t => {
                t.setValue(String(this.plugin.settings.rightSidebarWidth));
                t.setPlaceholder('252').onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.rightSidebarWidth = Number(value);
                    this.app.workspace.rightSplit.setSize(this.plugin.settings.rightSidebarWidth);
                    this.plugin.saveSettings();
                }));
            });

        containerEl.createEl('h4', { text: '标签栏自动隐藏' });
        
        new obsidian.Setting(containerEl)
            .setName('启用标签栏自动隐藏')
            .setDesc('切换以启用/禁用标签栏的自动隐藏功能')
            .addToggle(t => {
                t.setValue(this.plugin.settings.tabBarEnabled);
                t.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.tabBarEnabled = v;
                    if (v) {
                        if (!this.plugin.settings.leftTabBarPin) this.plugin.hideTabBar('left');
                        if (!this.plugin.settings.rightTabBarPin) this.plugin.hideTabBar('right');
                    } else {
                        this.plugin.showTabBar('left');
                        this.plugin.showTabBar('right');
                    }
                    this.plugin.saveSettings();
                }));
            });

        containerEl.createEl('h4', { text: '标题栏自动隐藏' });
        
        new obsidian.Setting(containerEl)
            .setName('启用标题栏自动隐藏')
            .setDesc('切换以启用/禁用标题栏的自动隐藏功能')
            .addToggle(t => {
                t.setValue(this.plugin.settings.titleBarEnabled);
                t.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.titleBarEnabled = v;
                    if (v) {
                        if (!this.plugin.settings.titleBarPin && !this.plugin.isSidebarExpanded()) {
                            this.plugin.hideTitleBar();
                        }
                    } else {
                        this.plugin.showTitleBar();
                    }
                    this.plugin.saveSettings();
                }));
            });

        containerEl.createEl('h4', { text: '操作说明' });
        const instructions = containerEl.createEl('div');
        instructions.setAttribute('style', 'padding: 10px; background: var(--background-secondary); border-radius: 5px;');
        instructions.createEl('p', { text: '• 在侧边栏区域内右键双击可锁定/解锁该侧边栏' });
        instructions.createEl('p', { text: '• 在标签栏区域内右键双击可锁定/解锁该标签栏' });
        instructions.createEl('p', { text: '• 在标题栏区域内右键双击可锁定/解锁标题栏' });
        instructions.createEl('p', { text: '• 双击功能区也可实现相同的锁定效果' });
        instructions.createEl('p', { text: '• 鼠标移动到窗口边缘热区可触发侧边栏展开' });
        instructions.createEl('p', { text: '• 鼠标移动到窗口顶部热区可触发标题栏展开' });
        instructions.createEl('p', { text: '• 侧边栏展开时标题栏会自动显示' });
        instructions.createEl('p', { text: '• 锁定状态下侧边栏、标签栏和标题栏不会自动隐藏' });
		
		containerEl.createEl('p', {
            text: `https://github.com/ttyyxx-ser/Obsidian-sidebar-expand-on-hover-Plus#`,
        });
    }
}

module.exports = SidebarExpandOnHoverPlugin;